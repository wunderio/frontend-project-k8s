{{- range $serviceName, $service := .Values.services }}
{{ if $service.cron }}
{{- range $jobName, $job := $service.cron }}

apiVersion: {{ include "frontend.cron.api-version" $ | trim }}
kind: CronJob
metadata:
  name: {{ $.Release.Name }}-{{ $jobName }}
  labels:
    {{- include "frontend.release_labels" $ | nindent 4 }}
spec:
  schedule: {{ $job.schedule | replace "~" (randNumeric 1) | quote }}
  concurrencyPolicy: {{ default "Forbid" $job.concurrencyPolicy }}
  startingDeadlineSeconds: 3600
  successfulJobsHistoryLimit: 0
  suspend: false
  jobTemplate:
    spec:
      parallelism: {{ default 1 $job.parallelism }}
      template:
        metadata:
          labels:
            {{- include "frontend.release_labels" $ | nindent 12 }}
            cronjob: "true"
        spec:
          enableServiceLinks: false
          containers:
          - name: {{ $jobName }}-cron
            image: {{ $service.image | quote }}
            volumeMounts:
              {{ if $service.mounts }}
              {{- range $index, $mountName := $service.mounts -}}
              {{ $mount := (index $.Values.mounts $mountName) }}
              {{- if eq $mount.enabled true }}
              - name: frontend-{{ $mountName }}
                mountPath: {{ $mount.mountPath }}
              {{- end }}
              {{- end }}
              {{- end }}
            env:
            {{- include "services.env" (dict "Values" $.Values "Release" $.Release "service" $service) | nindent 12 }}
            {{- range $key, $val := $service.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            command: ["/bin/bash", "-c"]
            args:
              - |
                # We need to save the executable command(s) into a file,
                # because the 'time' can exeute only command-files,
                # not the shell constructs.
                script="/tmp/cron.$$"
                cat << CMD > "${script}"
                #!/bin/bash
                set -x
                {{ $job.command | nindent 16 }}
                CMD
                chmod 755 "${script}"

                # Try to make the tmp files more unique.
                # $$ = pid of current running shell.
                stats="/tmp/stats.$$"
                output="/tmp/output.$$"
                output_json="/tmp/output_json.$$"

                # For backwards compatibility.
                echo "starting cron run"

                # The execution of the actual cron command.
                # For backwards compatibility reasons sent the output to stdout as well (tee).
                /usr/bin/time -f '"elapsed_time_s":%e,"peak_mem_kb":%M' -o "${stats}" "${script}" 2>&1 \
                | tee "${output}"

                # For backwards compatibility.
                echo "cron run completed"

                # It's tricky to get exit code of a random command from a pipeline.
                # It is highly shell-dependent.
                exit_code="${PIPESTATUS[0]}"

                # Convert the command output to json.
                node -e 'const fs = require("fs"); console.log(JSON.stringify(fs.readFileSync(0, "utf-8")));' < "${output}" > "${output_json}"

                # If the error code is non-zero,
                # the output file contains also a warning,
                # which is not json.
                # Get rid of this.
                stats="$(grep -E '"elapsed_time_s".*"peak_mem_kb"' ${stats})"

                cron_name="{{ $serviceName }}:{{ $jobName }}"

                # Assemble the JSON output.
                cat << JSON
                {"cron_name":"${cron_name}",${stats},"exit_code":${exit_code},"output":$(cat "${output_json}")}
                JSON

                # Use the exit code of the actual cron command.
                exit "$exit_code"
            resources:
              {{- if $job.resources }}
              {{- if $service.resources }}
              {{ merge $job.resources (merge $service.resources $.Values.serviceDefaults.resources) | toYaml | nindent 14 }}
              {{- else }}
              {{ merge $job.resources $.Values.serviceDefaults.resources | toYaml | nindent 14 }}
              {{- end }}
              {{- else if $service.resources }}
              {{ merge $service.resources $.Values.serviceDefaults.resources | toYaml | nindent 14 }}
              {{- else }}
              {{ $.Values.serviceDefaults.resources | toYaml | nindent 14 }}
              {{- end }}
          volumes:
            {{ if $service.mounts }}
            {{- range $index, $mountName := $service.mounts -}}
            {{ $mount := (index $.Values.mounts $mountName) }}
            {{- if eq $mount.enabled true }}
            - name: frontend-{{ $mountName }}
              persistentVolumeClaim:
                claimName: {{ $.Release.Name }}-{{ $mountName }}
            {{- end }}
            {{- end }}
            {{- end }}
          restartPolicy: OnFailure

          {{ if or $job.nodeSelector $service.nodeSelector -}}
          nodeSelector:
            {{ if $job.nodeSelector }}
            {{- $job.nodeSelector | toYaml | nindent 12 }}
            {{ else }}
            {{- $service.nodeSelector | toYaml | nindent 12 }}
            {{- end }}
          tolerations:
            {{ if $job.nodeSelector }}
            {{- include "frontend.tolerations" $job.nodeSelector | nindent 12 }}
            {{ else }}
            {{- include "frontend.tolerations" $service.nodeSelector | nindent 12 }}
            {{- end }}
          {{- end }}
---
{{- end }}
{{- end }}
{{- end }}
